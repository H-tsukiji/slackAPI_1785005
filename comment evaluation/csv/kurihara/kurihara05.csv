0," kurihara/.txt	-- ::. 
"
0.9999999999999999,0.0,0.0,0.0,0.0,0.0,0.0
1,.
nan,nan,nan,nan,nan,nan,nan
2,例えば
1.0,0.0,0.0,0.0,0.0,0.0,0.0
3,JavaScript
1.0,0.0,0.0,0.0,0.0,0.0,0.0
4,での
nan,nan,nan,nan,nan,nan,nan
5,非同期通信での情報取得は方法が複数ある．
0.9999999999999999,0.09128709291752768,0.0,0.1358036190637778,0.0,0.04950737714883371,0.16222142113076252
6,.
nan,nan,nan,nan,nan,nan,nan
7,プログラミングにおいて「ある課題を成し遂げたい」ときに幾
1.0000000000000002,0.10540925533894599,0.0,0.15681251204679503,0.0,0.05716619504750295,0.1873171623163388
8,つかの手法があったときに，それぞれを吟味する必要があり，そ
0.9999999999999999,0.0,0.06454972243679029,0.08097763301789161,0.0,0.1328422328310143,0.07254762501100116
9,の検索推薦をサポート
1.0000000000000002,0.0,0.0,0.0,0.0,0.08084520834544433,0.0
10,アプローチ
1.0,0.0,0.0,0.0,0.0,0.0,0.0
11,アプローチ
1.0,0.0,0.0,0.0,0.0,0.0,0.0
12,.
nan,nan,nan,nan,nan,nan,nan
13,検索
1.0,0.0,0.0,0.0,0.0,0.14002800840280097,0.0
14,()
nan,nan,nan,nan,nan,nan,nan
15,検索のクエリには単純なテキストによる検索だけではなく，ブ
0.9999999999999999,0.0,0.0,0.0,0.0,0.09901475429766741,0.0
16,ロックの前後のつながりをコンテキストとして利用する
1.0000000000000002,0.0,0.08333333333333336,0.05227083734893168,0.0,0.2286647801900118,0.0936585811581694
17,連続
1.0,0.0,0.0,0.0,0.0,0.0,0.0
18,した
1.0,0.0,0.4082482904638631,0.0,0.0,0.0,0.0
19,ソースコードの
1.0,0.0,0.0,0.0,0.0,0.14002800840280097,0.0
20,断片があったらそれを優先的に推薦する
0.9999999999999998,0.0,0.1543033499620919,0.09678678369916545,0.0,0.26462806201248157,0.08671099695241198
21,.
nan,nan,nan,nan,nan,nan,nan
22,プログラミングのロジック（例えばファイルが
1.0,0.0,0.0,0.0,0.0,0.06262242910851494,0.1025978352085154
23,open
1.0,0.0,0.0,0.0,0.0,0.0,0.0
24,されたらいずれ
1.0000000000000002,0.29814239699997197,0.11785113019775795,0.0,0.0,0.0,0.0
25,close
1.0,0.0,0.0,0.0,0.0,0.0,0.0
26,されることを予測した推薦）を利用する
0.9999999999999999,0.09128709291752768,0.28867513459481287,0.09053574604251853,0.03790490217894516,0.14852213144650112,0.16222142113076252
27,評価方法
0.9999999999999999,0.0,0.0,0.2716072381275556,0.07580980435789032,0.0,0.32444284226152503
28,.
nan,nan,nan,nan,nan,nan,nan
29,クロールしたソースコードの検索の性能を評価する．
0.9999999999999998,0.0,0.23145502494313788,0.14518017554874818,0.04052204492365538,0.26462806201248157,0.17342199390482396
30,.
nan,nan,nan,nan,nan,nan,nan
31,ソースコード
1.0,0.0,0.0,0.0,0.0,0.14002800840280097,0.0
32,の推薦がよりモダンであるかどうかを基準とし，予め意
0.9999999999999999,0.0,0.14433756729740643,0.0,0.0,0.0,0.0
33,図したソースコードが上位にくるかどうかで判断する．
1.0,0.0,0.20412414523193154,0.04267895997763199,0.0,0.2333800140046683,0.07647191129018724
34,.
nan,nan,nan,nan,nan,nan,nan
35,例えば
1.0,0.0,0.0,0.0,0.0,0.0,0.0
36,JavaScript
1.0,0.0,0.0,0.0,0.0,0.0,0.0
37,では進化が早く，一般的な検索
1.0,0.0,0.0,0.0,0.0,0.06262242910851494,0.0
38,(Google
1.0,0.0,0.0,0.0,0.0,0.0,0.0
39,など
nan,nan,nan,nan,nan,nan,nan
40,)
nan,nan,nan,nan,nan,nan,nan
41,では古い情報が出てく
1.0,0.0,0.0,0.0,0.0,0.0,0.0
42,ることがしばしばある．
1.0000000000000002,0.14907119849998599,0.0,0.22176638128637188,0.061898446059017294,0.0,0.26490647141300877
